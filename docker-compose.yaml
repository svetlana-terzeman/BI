# Сеть
networks:
  bi_network:
    driver: bridge
    name: bi_network
    attachable: true
    labels:
      com.docker.compose.project: "bi_project"

# Томы
volumes:
  couchdb3_data:
  minio_data:
  redis_data:
  postgres_data:
  rabbitmq_data:
  import_state:

services:
# Сервис подгрузки бекапов
  bb-importer:
    build:
      context: .
      dockerfile: Dockerfile_budibase_cli
    container_name: bb-importer
    restart: unless-stopped
    volumes:
      - ./backups:/backups
      - ./.env:/config/.env
      - import_state:/state
    entrypoint: [ "/bin/sh" ]
    command:
      - -c
      - |
        set -e
        
        # Импорт
        if [ -f /backups/budibase_latest.tar.gz ] && [ ! -f /state/done ]; then
          echo "Importing backup…"
          budi backups --import /backups/budibase_latest.tar.gz --env /config/.env \
          && touch /state/done
          echo "Import finished"
        else
          echo "No backup to import OR already imported"
        fi
        
        exec tail -f /dev/null
    depends_on:
      couchdb-service: { condition: service_started }
      minio-service: { condition: service_started }
    networks: [ bi_network ]

  # Budibase
  app-service:
    image: budibase/apps
    container_name: bbapps
    restart: unless-stopped
    networks: [bi_network]
    environment:
      SELF_HOSTED: 1
      COUCH_DB_URL: http://${COUCH_DB_USER}:${COUCH_DB_PASSWORD}@couchdb-service:5984
      WORKER_URL: http://worker-service:4003
      MINIO_URL: http://minio-service:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      BUDIBASE_ENVIRONMENT: ${BUDIBASE_ENVIRONMENT}
      PORT: 4002
      API_ENCRYPTION_KEY: ${API_ENCRYPTION_KEY}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      ENABLE_ANALYTICS: "true"
      REDIS_URL: redis-service:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      BB_ADMIN_USER_EMAIL: ${BB_ADMIN_USER_EMAIL}
      BB_ADMIN_USER_PASSWORD: ${BB_ADMIN_USER_PASSWORD}
      PLUGINS_DIR: ${PLUGINS_DIR}
      OFFLINE_MODE: ${OFFLINE_MODE:-}
    depends_on:
      bb-importer:
        condition: service_started
      worker-service:
        condition: service_started
      redis-service:
        condition: service_started

  worker-service:
    image: budibase/worker
    container_name: bbworker
    restart: unless-stopped
    networks: [bi_network]
    environment:
      SELF_HOSTED: 1
      PORT: 4003
      CLUSTER_PORT: ${MAIN_PORT}
      API_ENCRYPTION_KEY: ${API_ENCRYPTION_KEY}
      JWT_SECRET: ${JWT_SECRET}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_URL: http://minio-service:9000
      APPS_URL: http://app-service:4002
      COUCH_DB_USERNAME: ${COUCH_DB_USER}
      COUCH_DB_PASSWORD: ${COUCH_DB_PASSWORD}
      COUCH_DB_URL: http://${COUCH_DB_USER}:${COUCH_DB_PASSWORD}@couchdb-service:5984
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      REDIS_URL: redis-service:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      OFFLINE_MODE: ${OFFLINE_MODE:-}
    depends_on:
      bb-importer:
        condition: service_started
      redis-service:
        condition: service_started
      minio-service:
        condition: service_started

  minio-service:
    image: minio/minio
    restart: unless-stopped
    networks: [bi_network]
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BROWSER: "on"
    command: server /data --console-address ":9001"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 30s
      timeout: 20s
      retries: 3

  proxy-service:
    image: budibase/proxy
    container_name: bbproxy
    restart: unless-stopped
    networks: [bi_network]
    ports:
      - ${MAIN_PORT}:10000
    environment:
      - PROXY_RATE_LIMIT_WEBHOOKS_PER_SECOND=10
      - PROXY_RATE_LIMIT_API_PER_SECOND=20
      - APPS_UPSTREAM_URL=http://app-service:4002
      - WORKER_UPSTREAM_URL=http://worker-service:4003
      - MINIO_UPSTREAM_URL=http://minio-service:9000
      - COUCHDB_UPSTREAM_URL=http://couchdb-service:5984
      - RESOLVER=127.0.0.11
    depends_on:
      - minio-service
      - worker-service
      - app-service
      - couchdb-service

  couchdb-service:
    image: budibase/couchdb:v3.3.3-sqs-v2.1.1
    restart: unless-stopped
    networks: [bi_network]
    environment:
      - COUCHDB_PASSWORD=${COUCH_DB_PASSWORD}
      - COUCHDB_USER=${COUCH_DB_USER}
      - TARGETBUILD=docker-compose
    volumes:
      - couchdb3_data:/opt/couchdb/data

  redis-service:
    image: redis
    restart: unless-stopped
    networks: [bi_network]
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data

  # --- Основной BI проект ---
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./result:/app/result
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    networks: [bi_network]
    restart: unless-stopped

  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bitask_user -d BI"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks: [bi_network]

  rabbitmq:
    image: rabbitmq:4-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [bi_network]

  runner:
    build: .
    command: python runner.py
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks: [bi_network]
    restart: unless-stopped

  ltv:
    extends:
      file: DAGs/LTV/docker-compose.yaml
      service: ltv
    volumes:
      - ./result:/app/result
      - ./.env:/app/.env
  lal:
    extends:
      file: DAGs/LAL/docker-compose.yaml
      service: lal
    volumes:
      - ./result:/app/result
      - ./.env:/app/.env
